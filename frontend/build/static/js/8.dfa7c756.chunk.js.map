{"version":3,"sources":["components/layouts/MetaData/Metadata.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/EmojiOptions.js","img/img.jpg","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js"],"names":["MataData","_ref","title","_jsx","Helmet","children","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","name","createdAt","user","Date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","timeZone","format","ProfileModal","console","log","isOpen","onOpen","onClose","useDisclosure","_jsxs","_Fragment","onClick","IconButton","icon","ViewIcon","bg","color","pos","top","right","className","Modal","size","isCentered","ModalOverlay","ModalContent","h","w","pt","pb","ModalCloseButton","ModalBody","d","alignItems","justifyContent","Avatar","borderRadius","width","height","src","pic","alt","mr","Flex","direction","Text","fontSize","mt","toString","substring","email","fontWeight","ScrollableChat","ChatState","ScrollableFeed","map","style","display","Tooltip","label","placement","hasArrow","cursor","backgroundColor","concat","marginLeft","marginTop","padding","maxWidth","content","EmojiOptions","handleEmojiClick","emojis","useState","showOptions","setShowOptions","emoji","index","marginRight","handleClick","UserBadgeItem","handleFunction","admin","Badge","px","py","mb","variant","colorScheme","background","boxShadow","_hover","transform","CloseIcon","pl","UserListItem","Box","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","loading","setLoading","renameloading","setRenameLoading","isUserList","setUserList","toast","useToast","selectedChat","setSelectedChat","handleAddUser","async","find","u","user1","status","duration","isClosable","position","groupAdmin","data","axios","put","chatId","error","description","response","message","handleRemove","config","headers","base","overflowY","ModalHeader","fontFamily","p","textShadow","chatName","flexDir","flexWrap","FormControl","Input","placeholder","_placeholder","value","onChange","e","target","Button","md","lg","isLoading","Authorization","token","query","get","handleSearch","Spinner","ModalFooter","ENDPOINT","window","location","hostname","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","notification","setNotification","showEmojiOptions","setShowEmojiOptions","emit","sendMessage","event","key","post","useEffect","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","backgroundImage","bgSize","alignSelf","margin","onKeyDown","id","isRequired","Lottie","options","marginBottom","InputGroup","lastTypingTime","getTime","setTimeout","_focus","pr","InputRightElement","EmojiEmotionsIcon","handleToggleEmojiOptions","prevState","aria-label","Send","prevMessage","getSenderFull","Chatbox","borderColor","borderWidth","ChatLoading","Stack","Array","_","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","chats","setChats","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","JSON","stringify","MyChats","setLoggedUser","parse","localStorage","getItem","fetchChats","latestMessage","SideDrawer","loadingChat","setLoadingChat","setIsAuth","history","useHistory","bgGradient","_active","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","MenuItem","notif","n","as","ChevronDownIcon","border","shadow","textAlign","MenuDivider","EditIcon","boxSize","DeleteIcon","SettingsIcon","logoutHandler","removeItem","push","ExternalLinkIcon","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","DrawerBody","myuser","c","accessChat","ml","Chatpage","MetaData"],"mappings":"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aP,EAAUC,EAAGC,EAAGc,EAAKV,MAClCG,EAAcT,EAAUE,EAAGc,EAAKV,OAChCV,cAACwF,IAAO,CAACC,MAAOpF,EAAEI,OAAOS,KAAMwE,UAAU,eAAeC,UAAQ,EAAAzF,SAC9DF,cAACiE,IAAM,CACLY,GAAG,MACHL,GAAI,EACJpB,KAAK,KACLwC,OAAO,UACP1E,KAAMb,EAAEI,OAAOS,KACfmD,IAAKhE,EAAEI,OAAO6D,QAIpBtE,cAAA,QACEsF,MAAO,CACLO,gBAAgB,GAADC,OACbzF,EAAEI,OAAOC,MAAQU,EAAKV,IAAM,UAAY,WAE1CqF,WAAY5F,EAAmBC,EAAUC,EAAGC,EAAGc,EAAKV,KACpDsF,UAAWlF,EAAWV,EAAUC,EAAGC,EAAGc,EAAKV,KAAO,EAAI,GACtDwD,aAAc,OACd+B,QAAS,WACTC,SAAU,OACVhG,SAEDG,EAAE8F,YA1B+B9F,EAAEK,U,kBC8PnC0F,MAhRMtG,IAA2B,IAA1B,iBAAEuG,GAAkBvG,EACxC,MAAOwG,GAAUC,mBAAS,CACxB,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,eACA,eACA,qBACA,eACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,eACA,eACA,qBACA,qBACA,eACA,eACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,eACA,eACA,qBACA,eACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,wBAIIC,EAAaC,GAAkBF,oBAAS,GAO9C,OACEvG,cAAA,OAAKsF,MAAO,CAAEO,gBAAiB,WAAY3F,SACxCsG,GACCxG,cAAAwC,WAAA,CAAAtC,SACGoG,EAAOjB,KAAI,CAACqB,EAAOC,IAClB3G,cAAA,QAEEsF,MAAO,CAAEM,OAAQ,UAAWgB,YAAa,QACzCnE,QAASA,IAbAiE,KACnBL,EAAiBK,GACjBD,GAAe,IAWUI,CAAYH,GAAOxG,SAEjCwG,GAJIC,U,SCrQJ,MAA0B,gC,6CCiC1BG,MA9BOhH,IAAsC,IAArC,KAAEsB,EAAI,eAAE2F,EAAc,MAAEC,GAAOlH,EACpD,OACEyC,eAAC0E,IAAK,CACJC,GAAI,EACJC,GAAI,EACJjD,aAAa,KACb7D,EAAG,EACH+G,GAAI,EACJC,QAAQ,QACRzC,SAAU,GACV0C,YAAY,SACZ1B,OAAO,UACPnD,QAASsE,EACTzB,MAAO,CACLiC,WAAY,4DACZC,UAAW,mCAEbC,OAAQ,CACNF,WAAY,UACZG,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","file":"static/js/8.dfa7c756.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nfunction MataData({ title }) {\r\n  return (\r\n    <Helmet>\r\n      <title>{title}</title>\r\n    </Helmet>\r\n  );\r\n}\r\n\r\nexport default MataData;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n\r\n\r\n\r\nexport const createdAt = (user) => {\r\nconst createdAt = new Date(user.createdAt);\r\nconst options = {\r\n  year: \"numeric\",\r\n  month: \"2-digit\",\r\n  day: \"2-digit\",\r\n  hour: \"2-digit\",\r\n  minute: \"2-digit\",\r\n  hour12: true,\r\n  timeZone: \"Asia/Kolkata\",\r\n};\r\n\r\nconst formatter = new Intl.DateTimeFormat(\"en-IN\", options);\r\nconst formattedDate = formatter.format(createdAt);\r\nreturn formattedDate;\r\n  \r\n}","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n \r\n  ModalBody,\r\n  ModalCloseButton,\r\n\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n\r\n} from \"@chakra-ui/react\";\r\nimport { Flex, Avatar } from \"@chakra-ui/react\";\r\nimport { createdAt } from \"../../config/ChatLogics\";\r\n\r\n\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\nconsole.log(user);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\nreturn (\r\n  <>\r\n    {children ? (\r\n      <span onClick={onOpen}>{children}</span>\r\n    ) : (\r\n      <IconButton\r\n        icon={<ViewIcon  />}\r\n        onClick={onOpen}\r\n        bg=\"red\"\r\n        color=\"white\"\r\n        pos=\"absolute\"\r\n        top={4}\r\n        right={4}\r\n        className=\"close-button\"\r\n      />\r\n    )}\r\n    <Modal size=\"2xl\" onClose={onClose} isOpen={isOpen} isCentered>\r\n      <ModalOverlay />\r\n      <ModalContent\r\n        h=\"auto\"\r\n        w=\"auto\"\r\n        bg=\"#28293D\"\r\n        color=\"#F2F2F5\"\r\n        pt={4}\r\n        pb={4}\r\n      >\r\n        <ModalCloseButton color=\"#F2F2F5\" pos=\"absolute\" top={4} right={4} />\r\n        <ModalBody d=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n          <Avatar\r\n            size=\"xl\"\r\n            borderRadius=\"lg\"\r\n            width=\"200px\"\r\n            height=\"200px\"\r\n            src={user.pic}\r\n            alt={user.name}\r\n            mr={8}\r\n          />\r\n          <Flex direction=\"column\" alignItems=\"flex-start\">\r\n            <Text fontSize=\"1.2rem\" mt={2}>\r\n              ID: {user._id.toString().substring(0, 9)}\r\n            </Text>\r\n            <Text fontSize=\"1.2rem\" mt={2}>\r\n              Created At: {createdAt(user)}\r\n            </Text>\r\n            <Text fontSize=\"1.2rem\" mt={2}>\r\n              Email: {user.email}\r\n            </Text>\r\n            <Text fontSize=\"2rem\" fontWeight=\"bold\" mt={4}>\r\n              {user.name}\r\n            </Text>\r\n          </Flex>\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  </>\r\n);\r\n\r\n};\r\n\r\nexport default ProfileModal;\r\n","// @ts-nocheck\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport React from \"react\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#4D0099\" : \"#6600CC\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import React, { useState } from \"react\";\r\n\r\nconst EmojiOptions = ({ handleEmojiClick }) => {\r\n  const [emojis] = useState([\r\n    \"😀\",\r\n    \"😃\",\r\n    \"😄\",\r\n    \"😁\",\r\n    \"😆\",\r\n    \"😅\",\r\n    \"😂\",\r\n    \"🤣\",\r\n    \"😊\",\r\n    \"😇\",\r\n    \"🙂\",\r\n    \"🙃\",\r\n    \"😉\",\r\n    \"😌\",\r\n    \"😍\",\r\n    \"🥰\",\r\n    \"😘\",\r\n    \"😗\",\r\n    \"😙\",\r\n    \"😚\",\r\n    \"😋\",\r\n    \"😛\",\r\n    \"😝\",\r\n    \"😜\",\r\n    \"🤪\",\r\n    \"🤨\",\r\n    \"🧐\",\r\n    \"🤓\",\r\n    \"😎\",\r\n    \"🤩\",\r\n    \"🥳\",\r\n    \"😏\",\r\n    \"😒\",\r\n    \"😞\",\r\n    \"😔\",\r\n    \"😟\",\r\n    \"😕\",\r\n    \"🙁\",\r\n    \"😣\",\r\n    \"😖\",\r\n    \"😫\",\r\n    \"😩\",\r\n    \"🥺\",\r\n    \"😢\",\r\n    \"😭\",\r\n    \"😤\",\r\n    \"😠\",\r\n    \"😡\",\r\n    \"🤬\",\r\n    \"🤯\",\r\n    \"😳\",\r\n    \"🥵\",\r\n    \"🥶\",\r\n    \"😱\",\r\n    \"😨\",\r\n    \"😰\",\r\n    \"😥\",\r\n    \"😓\",\r\n    \"🤗\",\r\n    \"🤔\",\r\n    \"🤭\",\r\n    \"🤫\",\r\n    \"🤥\",\r\n    \"😶\",\r\n    \"😐\",\r\n    \"😑\",\r\n    \"😬\",\r\n    \"🙄\",\r\n    \"😯\",\r\n    \"😦\",\r\n    \"😧\",\r\n    \"😮\",\r\n    \"😲\",\r\n    \"🥱\",\r\n    \"😴\",\r\n    \"🤤\",\r\n    \"😪\",\r\n    \"😵\",\r\n    \"🤐\",\r\n    \"🥴\",\r\n    \"🤢\",\r\n    \"🤮\",\r\n    \"🤧\",\r\n    \"😷\",\r\n    \"🤒\",\r\n    \"🤕\",\r\n    \"🤑\",\r\n    \"🤠\",\r\n    \"😈\",\r\n    \"👿\",\r\n    \"👹\",\r\n    \"👺\",\r\n    \"🤡\",\r\n    \"💩\",\r\n    \"👻\",\r\n    \"💀\",\r\n    \"☠️\",\r\n    \"👽\",\r\n    \"👾\",\r\n    \"🤖\",\r\n    \"✌️\",\r\n    \"☀️\",\r\n    \"⚽️\",\r\n    \"❤️\",\r\n    \"⚾️\",\r\n    \"⛄️\",\r\n    \"⛵️\",\r\n    \"🚢\",\r\n    \"✈️\",\r\n    \"🚀\",\r\n    \"🚆\",\r\n    \"🚗\",\r\n    \"🚲\",\r\n    \"🛴\",\r\n    \"🛵\",\r\n    \"🏍️\",\r\n    \"🚔\",\r\n    \"🚒\",\r\n    \"🚑\",\r\n    \"🚒\",\r\n    \"🚓\",\r\n    \"🚨\",\r\n    \"🚦\",\r\n    \"🛑\",\r\n    \"🚧\",\r\n    \"🛣️\",\r\n    \"🗻\",\r\n    \"⛰️\",\r\n    \"🏔️\",\r\n    \"🌋\",\r\n    \"🏕️\",\r\n    \"🏖️\",\r\n    \"🏜️\",\r\n    \"🏝️\",\r\n    \"🏞️\",\r\n    \"🏟️\",\r\n    \"🏛️\",\r\n    \"🏗️\",\r\n    \"🏘️\",\r\n    \"🏚️\",\r\n    \"🏠\",\r\n    \"🏡\",\r\n    \"🏢\",\r\n    \"🏣\",\r\n    \"🏥\",\r\n    \"🏦\",\r\n    \"🏨\",\r\n    \"🏩\",\r\n    \"🏪\",\r\n    \"🏫\",\r\n    \"🏬\",\r\n    \"🏭\",\r\n    \"🏯\",\r\n    \"🏰\",\r\n    \"💒\",\r\n    \"🗼\",\r\n    \"🗽\",\r\n    \"⛪️\",\r\n    \"🕌\",\r\n    \"🕍\",\r\n    \"⛩️\",\r\n    \"🕋\",\r\n    \"🛕️\",\r\n    \"🛖️\",\r\n    \"🛗️\",\r\n    \"🛚️\",\r\n    \"🛛️\",\r\n    \"🛜️\",\r\n    \"🛝️\",\r\n    \"🛞️\",\r\n    \"🛟️\",\r\n    \"🛠️\",\r\n    \"🛡️\",\r\n    \"🛢️\",\r\n    \"🛣️\",\r\n    \"🛤️\",\r\n    \"🛥️\",\r\n    \"🛩️\",\r\n    \"🛫\",\r\n    \"🛬\",\r\n    \"🛰️\",\r\n    \"🛳️\",\r\n    \"🛴\",\r\n    \"🛵\",\r\n    \"🏍️\",\r\n    \"🚔\",\r\n    \"🚒\",\r\n    \"🚑\",\r\n    \"🚒\",\r\n    \"🚓\",\r\n    \"🚨\",\r\n    \"🚦\",\r\n    \"🛑\",\r\n    \"🚧\",\r\n    \"🛣️\",\r\n    \"🗻\",\r\n    \"⛰️\",\r\n    \"🏔️\",\r\n    \"🌋\",\r\n    \"🏕️\",\r\n    \"🏖️\",\r\n    \"🏜️\",\r\n    \"🏝️\",\r\n    \"🏞️\",\r\n    \"🏟️\",\r\n    \"🏛️\",\r\n    \"🏗️\",\r\n    \"🏘️\",\r\n    \"🏚️\",\r\n    \"🏠\",\r\n    \"🏡\",\r\n    \"🏢\",\r\n    \"🏣\",\r\n    \"🏥\",\r\n    \"🏦\",\r\n    \"🏨\",\r\n    \"🏩\",\r\n    \"🏪\",\r\n    \"🏫\",\r\n    \"🏬\",\r\n    \"🏭\",\r\n    \"🏯\",\r\n    \"🏰\",\r\n    \"💒\",\r\n    \"🗼\",\r\n    \"🗽\",\r\n    \"⛪️\",\r\n    \"🕌\",\r\n    \"🕍\",\r\n    \"⛩️\",\r\n    \"🕋\",\r\n    \"🛕️\",\r\n    \"🛖️\",\r\n    \"🛗️\",\r\n    \"🛚️\",\r\n    \"🛛️\",\r\n    \"🛜️\",\r\n    \"🛝️\",\r\n    \"🛞️\",\r\n    \"🛟️\",\r\n    \"🛠️\",\r\n  ]);\r\n \r\n\r\n const [showOptions, setShowOptions] = useState(true); // State variable to control visibility\r\n\r\n  const handleClick = (emoji) => {\r\n    handleEmojiClick(emoji);\r\n    setShowOptions(false); // Hide the emoji options after selection\r\n  };\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#28293D\" }}>\r\n      {showOptions && ( // Render the emoji options only when showOptions is true\r\n        <>\r\n          {emojis.map((emoji, index) => (\r\n            <span\r\n              key={index}\r\n              style={{ cursor: \"pointer\", marginRight: \"10px\" }}\r\n              onClick={() => handleClick(emoji)}\r\n            >\r\n              {emoji}\r\n            </span>\r\n          ))}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmojiOptions;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/img.572edcce.jpg\";","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n      style={{\r\n        background: \"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%)\", \r\n        boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.2)\", \r\n      }}\r\n      _hover={{\r\n        background: \"#4D0099\", \r\n        transform: \"scale(1.2)\", \r\n     marginLeft: \"5px\",\r\n      }}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\n\r\nconst UserListItem = ({user, handleFunction }) => {\r\n\r\n\r\n  return (\r\n    <Box\r\n \r\n    \r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#555770\"\r\n      _hover={{\r\n        bg: \"#6600CC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"#F2F2F5\" \r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const [isUserList , setUserList] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setUserList(true);\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n         \"Content-type\" : \"appilication/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n setUserList(false);\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n     \r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n       \r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(user1._id);\r\n    console.log(selectedChat._id); \r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = { headers : {\"Content-type\" : \"application/json\"} };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        }, \r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent bg=\"#28293D\" overflowY=\"scroll\"\r\n        height=\"60%\"\r\n        >\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work Sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n            background=\"#1C1C28\"\r\n            color=\"#F2F2F5\"\r\n            p={2}\r\n            mb={3}\r\n            borderRadius=\"md\"\r\n            boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\r\n            textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={1}\r\n                bg=\"#555770\"\r\n                color=\"#F2F2F5\"\r\n                _placeholder={{\r\n                  color: \"#F2F2F5\",\r\n                }}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                d=\"flex\"\r\n                fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n                color=\"#E4E4EB\"\r\n                background=\"linear-gradient(145.51deg, #AC5DD9 7.21%, #004FC4 94.47%);\r\n\"\r\n                textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\r\n                boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\r\n                _hover={{\r\n                  bg: \"#6600CC\",\r\n                }}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                bg=\"#555770\"\r\n                color=\"#F2F2F5\"\r\n                _placeholder={{\r\n                  color: \"#F2F2F5\",\r\n                }}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n             isUserList && searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              onClick={() => handleRemove(user)}\r\n              d=\"flex\"\r\n              fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n              color=\"#E4E4EB\"\r\n              background=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%);\r\n\"\r\n              textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\r\n              boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\r\n              _hover={{\r\n                transform: \"scale(1.1)\",\r\n                bg: \"#6600CC\",\r\n              }}\r\n            >\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n} from \"@chakra-ui/react\";\r\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\r\nimport Send from \"@mui/icons-material/Send\";\r\nimport {  Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport EmojiOptions from \"./EmojiOptions\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport backgroundImage from \"../img/img.jpg\";\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ENDPOINT = window.location.hostname === \"localhost\"\r\n  ? \"http://localhost:5000\"\r\n  : \"https://chat-mind-3pcx.onrender.com\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const [showEmojiOptions, setShowEmojiOptions] = useState(false);\r\n\r\n  const handleEmojiClick = (emoji) => {\r\n    setNewMessage((prevMessage) => prevMessage + emoji);\r\n  };\r\n\r\n  const handleToggleEmojiOptions = () => {\r\n    setShowEmojiOptions((prevState) => !prevState);\r\n  };\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n         \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n \r\n// sendMessage is used to send message on clicking send button\r\n  const sendMessage = async (event) => {\r\n    if (newMessage && event.key === \"Enter\") {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n        };\r\n\r\n        setNewMessage(\"\");\r\n\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            fontWeight={800}\r\n              textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          \r\n            \r\n          >\r\n            <IconButton\r\n              bg=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%);\"\r\n              color=\"#F2F2F5\"\r\n              _hover={{ bg: \"#6600CC\" }}\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg={`url(${backgroundImage})`}\r\n            bgSize=\"cover\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n\r\n              <InputGroup>\r\n                <Input\r\n                  variant=\"filled\"\r\n                  bg=\"#28293D\"\r\n                  placeholder=\"Enter a message..\"\r\n                  value={newMessage}\r\n                  color=\"#F2F2F5\"\r\n                  _placeholder={{ color: \"#F2F2F5\" }}\r\n                  _hover={{ bg: \"#1C1C28\" }}\r\n                  onChange={typingHandler}\r\n                  _focus={{\r\n                    bg: \"#1C1C28\",\r\n                  }}\r\n                  pr=\"4rem\"\r\n                  pb=\"0\" \r\n                 \r\n                />\r\n                <InputRightElement width=\"4rem\">\r\n                  <IconButton\r\n                    icon={<EmojiEmotionsIcon />}\r\n                    onClick={handleToggleEmojiOptions}\r\n                    aria-label=\"Open Emoji Options\"\r\n                    bg=\"none\"\r\n                    _hover={{ bg: \"none\" }}\r\n                    color=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%)\"\r\n                  />\r\n                  <IconButton\r\n                    icon={<Send />}\r\n                    onClick={sendMessage}\r\n                    aria-label=\"Send Message\"\r\n                    bg=\"none\"\r\n                    _hover={{ bg: \"none\" }}\r\n                    color=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%)\"\r\n                  />\r\n                </InputRightElement>\r\n              </InputGroup>\r\n              {showEmojiOptions && (\r\n                <EmojiOptions handleEmojiClick={handleEmojiClick} />\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"#28293D\"\r\n     \r\n      color=\"#F2F2F5\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderColor=\"#555770\"\r\n      borderWidth=\"1px\"\r\n     \r\n\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/react\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack bg=\"#28293D\">\r\n      {[...Array(12)].map((_, index) => (\r\n        <Skeleton key={index} height=\"45px\" />\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const {  chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n      \"Content-type\" : \"appilication/json\"\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n     \r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n   \r\n    if (selectedUsers.length <= 2) {\r\n      toast({\r\n        title: \"Please select more than 2 users\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n\r\n      return;\r\n    }\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n     \r\n  \r\n    try {\r\n      const config = { headers: { \"Content-type\": \"application/json\" } };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent bg=\"#28293D\">\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work Sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n            background=\"#1C1C28\"\r\n            color=\"#F2F2F5\"\r\n            p={2}\r\n            mb={3}\r\n            borderRadius=\"md\"\r\n            textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\r\n            boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton color=\"#F2F2F5\" />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                bg=\"#555770\"\r\n                color=\"#F2F2F5\"\r\n                _placeholder={{\r\n                  color: \"#F2F2F5\",\r\n                }}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                bg=\"#555770\"\r\n                color=\"#F2F2F5\"\r\n                _placeholder={{\r\n                  color: \"#F2F2F5\",\r\n                }}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              d=\"flex\"\r\n              fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n              onClick={handleSubmit}\r\n              color=\"#E4E4EB\"\r\n              background=\"linear-gradient(147.14deg, #3E7BFA 6.95%, #6600CC 93.05%);\r\n\"\r\n              textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\r\n              boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\r\n              _hover={{\r\n                transform: \"scale(1.1)\",\r\n                bg: \"#6600CC\",\r\n              }}\r\n            >\r\n              Create Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","// import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"#28293D\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"2px\"\r\n      borderColor=\"#555770\"\r\n    >\r\n      <Box\r\n        pb={1}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work Sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        color=\"#E4E4EB\"\r\n        borderRadius=\"md\"\r\n        boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\r\n        background=\"#1C1C28\"\r\n      >\r\n        <Box fontWeight=\"bold\" textShadow=\"3px 3px 6px rgba(0, 0, 0, 0.5)\">\r\n          All Chats\r\n        </Box>\r\n        <GroupChatModal>\r\n          <Button style={{ color: \"black\" }}>Make Group</Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      ;\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        background=\"#1C1C28\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n        boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#6600CC\" : \"#555770\"}\r\n                color={selectedChat === chat ? \"#E4E4EB\" : \"#F2F2F5\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n                boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","// @ts-nocheck\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport \"./SideDrawer.css\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport {\r\n  BellIcon,\r\n  ChevronDownIcon,\r\n  DeleteIcon,\r\n  EditIcon,\r\n  ExternalLinkIcon,\r\n  SettingsIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport { createdAt } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n    setIsAuth,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    setIsAuth(false);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // handle the access chat function\r\n  const accessChat = async (userId) => {\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"#28293D\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n        borderColor=\"#555770\"\r\n        color=\"#EBEBF0\"\r\n      >\r\n        <Tooltip\r\n          label=\"Search Users to chat\"\r\n          hasArrow\r\n          placement=\"bottom-end\"\r\n          bgGradient=\"linear(to-r, #3E7BFA, #6600CC)\"\r\n          color=\"#FFFFFF\"\r\n          _hover={{\r\n            bg: \"#555770\",\r\n            color: \"#FFFFFF\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"ghost\"\r\n            onClick={onOpen}\r\n            _hover={{\r\n              bg: \"#555770\",\r\n            }}\r\n            _active={{\r\n              bg: \"transparent\",\r\n              color: \"#FFFFFF\",\r\n            }}\r\n          >\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text\r\n              d={{ base: \"none\", md: \"flex\" }}\r\n              px={4}\r\n              _hover={{\r\n                bg: \"#555770\",\r\n              }}\r\n            >\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n\r\n         <h1 style={{color : \"white\"}}>\r\n          LetsChat\r\n         </h1>\r\n\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2} bg=\"#28293D\" color=\"white\">\r\n              {!notification.length && <MenuItem>No New Messages</MenuItem>}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"transparent\" _hover={{ bg: \"#555770\" }}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n              <ChevronDownIcon _hover={{ color: \"#6600CC\" }} />\r\n            </MenuButton>\r\n            <MenuList bg=\"#28293D\" border=\"none\" shadow=\"none\" p={0}>\r\n              <Box p={2} textAlign=\"center\">\r\n                <Avatar size=\"md\" name={user.name} src={user.pic} mb={2} />\r\n                <Box fontSize=\"sm\">\r\n                  <strong>ID:</strong> {user._id.toString().substring(0, 8)}{\" \"}\r\n                  <br />\r\n                  <strong>Name:</strong> {user.name} <br />\r\n                  <strong>Email:</strong> {user.email} <br />\r\n                  <strong>Created At:</strong> {createdAt(user)} <br />\r\n                </Box>\r\n              </Box>\r\n              <MenuDivider />\r\n              <ProfileModal user={user}>\r\n                <MenuItem _hover={{ bg: \"#555770\" }}>\r\n                  <EditIcon mr={2} boxSize={4} />\r\n                  Profile\r\n                </MenuItem>\r\n              </ProfileModal>\r\n              <MenuItem _hover={{ bg: \"#555770\" }}>\r\n                <DeleteIcon mr={2} boxSize={4} />\r\n                Delete Account\r\n              </MenuItem>\r\n\r\n              <MenuItem _hover={{ bg: \"#555770\" }}>\r\n                <SettingsIcon mr={2} boxSize={4} />\r\n                Settings\r\n              </MenuItem>\r\n              <MenuItem _hover={{ bg: \"#555770\" }} onClick={logoutHandler}>\r\n                <ExternalLinkIcon mr={2} boxSize={4} />\r\n                Logout\r\n              </MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent bg=\"#28293D\" color=\"#28293D\">\r\n          <DrawerHeader style={{color : \"white\"}}>LetsChat</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n                color=\"#F2F2F5\"\r\n                bg=\"#555770\"\r\n              />\r\n              <Button\r\n                onClick={handleSearch}\r\n                color=\"#F2F2F5\"\r\n                bg=\"#555770\"\r\n                _hover={{\r\n                  bg: \"#6600CC\",\r\n                  color: \"#F2F2F5\",\r\n                  boxShadow: \"2px 2px 8px rgba(0, 0, 0, 0.6)\",\r\n                }}\r\n                _active={{\r\n                  bg: \"#6600CC\",\r\n                  color: \"#F2F2F5\",\r\n                  boxShadow: \"none\",\r\n                }}\r\n                p={3}\r\n              >\r\n                Go\r\n              </Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((myuser) => (\r\n                <UserListItem\r\n                  key={myuser._id}\r\n                  user={myuser}\r\n                  handleFunction={() => accessChat(myuser._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport React, { useState  } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport MetaData from \"../components/layouts/MetaData/Metadata\";\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false); \r\n  const { user  } = ChatState();\r\n\r\n  return (\r\n    <>\r\n      <MetaData title=\"Chat\" />\r\n      <div style={{ width: \"100%\" }}>\r\n        {user && <SideDrawer />}\r\n        <Box\r\n          d=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          w=\"100%\"\r\n          h=\"91.5vh\"\r\n          p=\"10px\"\r\n        >\r\n          {user && <MyChats fetchAgain={fetchAgain} />}\r\n          {user && (\r\n            <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n          )}\r\n        </Box>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n"],"sourceRoot":""}